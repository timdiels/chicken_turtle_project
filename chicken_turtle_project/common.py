# Copyright (C) 2016 Tim Diels <timdiels.m@gmail.com>
# 
# This file is part of Chicken Turtle Project.
# 
# Chicken Turtle is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Chicken Turtle is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with Chicken Turtle.  If not, see <http://www.gnu.org/licenses/>.

from pathlib import Path
from chicken_turtle_util.exceptions import UserException
import logging

def eval_file(path):
    with path.open() as f:
        code = compile(f.read(), str(path), 'exec')
        locals_ = {}
        exec(code, None, locals_)
        return locals_
    
def configure_logging():
    logging.basicConfig()
    
def get_project():
    '''
    Get and validate project.py
    
    Returns
    -------
    dict
        project info
        
    Raises
    ------
    UserException
        On validation errors
    '''
    project_root = Path.cwd()
    
    # Load project info
    try:
        project = eval_file(project_root / 'project.py')['project']
    except IOError:
        raise UserException('Must run from the directory which contains project.py')
    except KeyError:
        raise UserException('project.py must export a `project` variable (with a dict)')
    
    for attr in 'name readme_file description author author_email url license classifiers install_requires keywords'.split():
        if attr not in project:
            raise UserException('Missing required attribute: project["{}"]'.format(attr))
    
    #
    name = project['name']
    pkg_root = name

    # More checks
    if 'version' in project:
        raise UserException('Encountered `version` in `project`. Version should be specified in {}/version.py as `__version__=...`, not in project.py'.format(pkg_root))
    elif 'package_data' in project:
        raise UserException('Encountered `package_data` in `project`. This is auto-generated, remove it. If your data directories are named `data`, have no `__init__.py` and are part of a package in {}, they will be included by auto generation.'.format(pkg_root))
    elif 'packages' in project:
        raise UserException('Encountered `packages` in `project`. This is auto-generated by mksetup, remove it.')
    elif 'long_description' in project:
        raise UserException('Encountered `long_description` in `project`. This is auto-generated by mksetup, remove it.')
    