# Copyright (C) 2016 Tim Diels <timdiels.m@gmail.com>
# 
# This file is part of Chicken Turtle Project.
# 
# Chicken Turtle is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Chicken Turtle is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with Chicken Turtle.  If not, see <http://www.gnu.org/licenses/>.

from chicken_turtle_project.common import get_project, eval_file, graceful_main
from chicken_turtle_util.exceptions import UserException
from setuptools import find_packages  # Always prefer setuptools over distutils
from collections import defaultdict
from pathlib import Path
import plumbum as pb
import pypandoc
import os
import pprint

import logging
logger = logging.getLogger(__name__)

def main():
    '''
    Create or update setup.py and requirements.txt
    '''
    graceful_main(_main, logger)
    
def _main():
    #TODO ensure the readme_file is mentioned in MANIFEST.in
    project_root = Path.cwd()
    
    # Load project info
    logger.debug('Load project info')
    project = get_project()
    name = project['name']
    pkg_root = Path(name)
    
    # Write requirements.txt
    logger.debug('requirements.in')
    requirements_in_path = project_root / 'requirements.in'
    if not requirements_in_path.exists():
        raise UserException('{} does not exist'.format(requirements_in_path))
    pb.local['pip-compile']('requirements.in')
    
    # List dependencies
    logger.debug('requirements.txt')
    with project_root / 'requirements.txt' as f:
        project['install_requires'] = list(map(str.strip, f.readlines()))
    
    # Transform some keys
    logger.debug('Transform some attributes')
    project['long_description'] = pypandoc.convert(project['readme_file'], 'rst')
    project['classifiers'] = [line.strip() for line in project['classifiers'].splitlines() if line.strip()] 

    # Version
    logger.debug('Load version')
    try:
        version_path = pkg_root / 'version.py'
        project['version'] = eval_file(version_path)['__version__'] #TODO check format
    except IOError:
        raise UserException('{} does not exist'.format(version_path))
    except KeyError:
        raise UserException('{} must contain `__version__`'.format(version_path))
        
    # Packages and package data
    logger.debug('Packages and package data')
    # TODO test:
    # - pkg[init]/pkg[init]/data/derr/data -> only pick the top data
    # - pkg[init]/notpkg/data -> don't pick data dir as it's not child of a package
    # be sure to test for correct pkg names too
    project['packages'] = find_packages()
    package_data = defaultdict(list) 
    for parent, dirs, files in os.walk(str(pkg_root), topdown=True): #XXX find_packages already found all packages so you could simply use that and check for children named 'data' that aren't in `packages` themselves
        if '__init__.py' not in files:
            # Don't search in non-package directories
            dirs[:] = []
        elif 'data' in dirs:
            # Is part of a package, is named 'data', could be a data dir or a package
            dir_ = Path(parent) / 'data'
            if not (dir_ / '__init__.py').exists():
                # It's a data dir
                dirs.remove('data') 
                for parent2, _, files2 in os.walk(str(dir_)):
                    package_data[parent.replace('/', '.')].extend(str(Path(parent2) / file) for file in files2)
    project['package_data'] = dict(package_data)
    
    # Write setup.py
    del project['readme_file']
    logger.debug('Writing setup.py')
    with (project_root / 'setup.py').open('w') as f:
        f.write(project_template.format(pprint.pformat(project, indent=4, width=120)))
        
project_template = '''
# Auto generated by ct-mksetup
# Do not edit this file, edit ./project.py instead

from setuptools import setup
setup(
    **{}
)
'''.lstrip()
    