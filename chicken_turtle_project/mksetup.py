# Copyright (C) 2016 Tim Diels <timdiels.m@gmail.com>
# 
# This file is part of Chicken Turtle Project.
# 
# Chicken Turtle is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Chicken Turtle is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with Chicken Turtle.  If not, see <http://www.gnu.org/licenses/>.

"""
Setuptools based setup functions.

See:
- https://packaging.python.org/en/latest/distributing.html
- https://github.com/pypa/sampleproject
"""

from common import get_project, eval_file, configure_logging
from setuptools import find_packages  # Always prefer setuptools over distutils
from collections import defaultdict
from pathlib import Path
import pypandoc
import os
import sys

def _critical_exit(message):
    print('ct-mksetup: Error: ' + message)
    sys.exit(1)

def main():
    '''
    Create or update setup.py
    '''
    #TODO ensure the readme_file is mentioned in MANIFEST.in
    
    configure_logging()
    
    project_root = Path.cwd()
    
    # Load project info
    project = get_project()
    name = project['name']
    pkg_root = name
    
    # Transform some keys
    project['long_description'] = pypandoc.convert(project['readme_file'], 'rst')
    project['classifiers'] = [line.strip() for line in project['classifiers'].splitlines() if line.strip()]
    project['install_requires'] = project['install_requires'].split()
    if 'extras_require' in project:
        project['extras_require'] = {k:v.split() for k,v in project['extras_require'].items()}

    # Version
    try:
        version_path = pkg_root / 'version.py'
        project['version'] = eval_file(version_path)['__version__'] #TODO check format
    except IOError:
        _critical_exit('{} does not exist'.format(version_path))
    except KeyError:
        _critical_exit('{} must contain `__version__`'.format(version_path))
        
    # Packages and package data
    # TODO test:
    # - pkg[init]/pkg[init]/data/derr/data -> only pick the top data
    # - pkg[init]/notpkg/data -> don't pick data dir as it's not child of a package
    # be sure to test for correct pkg names too
    project['packages'] = find_packages(name)
    package_data = defaultdict(list) 
    for parent, dirs, files in os.walk(str(pkg_root), topdown=True):
        if '__init__.py' not in files:
            # Don't search in non-package directories
            dirs[:] = []
        elif 'data' in dirs:
            # Is part of a package, is named 'data', could be a data dir or a package
            dir_ = parent / 'data'
            if not (dir_ / '__init__.py').exists():
                # It's a data dir
                del dirs['data']
                #TODO not sure whether `parent` is relative to pkg_root, am assuming it now 
                for parent, _, files in os.walk(str(dir_)):
                    package_data[parent].extend(parent / file for file in files)
    print(package_data)
    
    project['package_data'] = list(package_data.items()) #TODO not a dict!, with pkg name, etc
    
    # Write setup.py
    with (project_root / 'setup.py').open('w') as f:
        f.write('''
# Do not edit!
# Auto generated by ct-mksetup using ./project.py
from setuptools import setup
setup(
    **{!repr}
) 
'''.format(project))
    